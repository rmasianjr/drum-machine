{"version":3,"sources":["components/Display/Display.js","sound-data.js","components/DrumPad/DrumPad.js","components/Keys/Keys.js","App.js","serviceWorker.js","index.js"],"names":["Display","_ref","display","react_default","a","createElement","id","className","soundList","url","key","keyCode","DrumPad","state","press","handleKeyPress","e","_this","props","sound","playSound","pressButton","setState","_this$props","onDisplayName","audio","document","getElementById","currentTime","play","setTimeout","addEventListener","this","removeEventListener","concat","onClick","src","Component","Keys","map","components_DrumPad_DrumPad","App","handleDisplayName","name","components_Display_Display","components_Keys_Keys","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fdec94c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Display.css';\r\n\r\nconst Display = ({ display }) => (\r\n  <div id=\"display\" className=\"Display\">\r\n    {display}\r\n  </div>\r\n);\r\n\r\nDisplay.propTypes = {\r\n  display: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Display;\r\n","const soundList = [\r\n  {\r\n    id: 'Crash-Cymbal',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530396/drumkit/Crash-Cymbal-4.wav',\r\n    key: 'Q',\r\n    keyCode: 81\r\n  },\r\n  {\r\n    id: 'Cowbell',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530311/drumkit/Cowbell-2.wav',\r\n    key: 'W',\r\n    keyCode: 87\r\n  },\r\n  {\r\n    id: 'Claves',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530281/drumkit/Claves.wav',\r\n    key: 'E',\r\n    keyCode: 69\r\n  },\r\n  {\r\n    id: 'Cross-Sticks',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530280/drumkit/Cross-Sticks.wav',\r\n    key: 'A',\r\n    keyCode: 65\r\n  },\r\n  {\r\n    id: 'Ensoniq-Snare',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530280/drumkit/Ensoniq-VFX-SD-Snare-2.wav',\r\n    key: 'S',\r\n    keyCode: 83\r\n  },\r\n  {\r\n    id: 'High-Conga',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530273/drumkit/High-Conga-1.wav',\r\n    key: 'D',\r\n    keyCode: 68\r\n  },\r\n  {\r\n    id: 'Wacky-Kick',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530252/drumkit/E-Mu-Proteus-FX-Wacky-Kick.wav',\r\n    key: 'Z',\r\n    keyCode: 90\r\n  },\r\n  {\r\n    id: 'Closed-Hi-Hat',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530215/drumkit/Closed-Hi-Hat-5.wav',\r\n    key: 'X',\r\n    keyCode: 88\r\n  },\r\n  {\r\n    id: 'Clap',\r\n    url:\r\n      'https://res.cloudinary.com/dpc8imgk1/video/upload/v1545530213/drumkit/Clap-3.wav',\r\n    key: 'C',\r\n    keyCode: 67\r\n  }\r\n];\r\n\r\nexport { soundList };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './DrumPad.css';\r\n\r\nclass DrumPad extends Component {\r\n  state = {\r\n    press: false\r\n  };\r\n\r\n  static propTypes = {\r\n    sound: PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired,\r\n      keyCode: PropTypes.number.isRequired,\r\n      key: PropTypes.string.isRequired\r\n    }),\r\n    onDisplayName: PropTypes.func.isRequired\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if (e.keyCode === this.props.sound.keyCode) {\r\n      this.playSound();\r\n    }\r\n  };\r\n\r\n  pressButton = () => {\r\n    this.setState({ press: true });\r\n  };\r\n\r\n  playSound = () => {\r\n    const { sound, onDisplayName } = this.props;\r\n    const audio = document.getElementById(sound.key);\r\n    if (!audio) {\r\n      return;\r\n    }\r\n    audio.currentTime = 0;\r\n    audio.play();\r\n    this.pressButton();\r\n    setTimeout(() => this.setState({ press: false }), 100);\r\n    onDisplayName(sound.id);\r\n  };\r\n\r\n  render() {\r\n    const { sound } = this.props;\r\n    return (\r\n      <div\r\n        className={`drum-pad ${this.state.press ? 'active' : ''}`}\r\n        id={sound.id}\r\n        onClick={this.playSound}\r\n      >\r\n        <audio className=\"clip\" src={sound.url} id={sound.key} />\r\n        {sound.key}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from 'react';\r\nimport { soundList } from '../../sound-data';\r\nimport DrumPad from '../DrumPad/DrumPad';\r\nimport PropTypes from 'prop-types';\r\nimport './Keys.css';\r\n\r\nconst Keys = ({ onDisplayName }) => (\r\n  <div className=\"Keys-container\">\r\n    {soundList.map(sound => (\r\n      <DrumPad key={sound.id} sound={sound} onDisplayName={onDisplayName} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nKeys.propTypes = {\r\n  onDisplayName: PropTypes.func\r\n};\r\n\r\nexport default Keys;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Display from './components/Display/Display';\r\nimport Keys from './components/Keys/Keys';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    display: 'Click or Press a Key'\r\n  };\r\n\r\n  handleDisplayName = name => {\r\n    this.setState({\r\n      display: name\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <h1>Drum Machine</h1>\r\n        </header>\r\n        <div id=\"drum-machine\">\r\n          <Display display={this.state.display} />\r\n          <Keys onDisplayName={this.handleDisplayName} />\r\n        </div>\r\n        <footer className=\"footer\">\r\n          <span>\r\n            Created by:{' '}\r\n            <a\r\n              className=\"footer-link\"\r\n              href=\"https://twitter.com/rmasianjr\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Ricardo Masian Jr.\r\n            </a>\r\n          </span>\r\n          <span> | </span>\r\n          <span>\r\n            <a\r\n              className=\"footer-link\"\r\n              href=\"https://github.com/rmasianjr/drum-machine\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              View source code\r\n            </a>\r\n          </span>\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}